{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  // $FlowFixMe[prop-missing]\n  animatedStyles.forEach(function (animatedStyle) {\n    return animatedStyle.update();\n  });\n}\n\n/**\n * Some operations are executed only on batch end, which is _mostly_ scheduled when\n * Animated component props change. For some of the changes which require immediate execution\n * (e.g. setValue), we create a separate batch in case none is scheduled.\n */\nfunction _executeAsAnimatedBatch(id, operation) {\n  NativeAnimatedAPI.setWaitingForIdentifier(id);\n  operation();\n  NativeAnimatedAPI.unsetWaitingForIdentifier(id);\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See https://reactnative.dev/docs/animatedvalue\n */\nvar AnimatedValue = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inherits(AnimatedValue, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedValue);\n  function AnimatedValue(value, config) {\n    var _this;\n    _classCallCheck(this, AnimatedValue);\n    _this = _super.call(this);\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    _this._startingValue = _this._value = value;\n    _this._offset = 0;\n    _this._animation = null;\n    if (config && config.useNativeDriver) {\n      _this.__makeNative();\n    }\n    return _this;\n  }\n  _createClass(AnimatedValue, [{\n    key: \"__detach\",\n    value: function __detach() {\n      var _this2 = this;\n      if (this.__isNative) {\n        NativeAnimatedAPI.getValue(this.__getNativeTag(), function (value) {\n          _this2._value = value - _this2._offset;\n        });\n      }\n      this.stopAnimation();\n      _get(_getPrototypeOf(AnimatedValue.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      return this._value + this._offset;\n    }\n\n    /**\n     * Directly set the value.  This will stop any animations running on the value\n     * and update all the bound properties.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#setvalue\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var _this3 = this;\n      if (this._animation) {\n        this._animation.stop();\n        this._animation = null;\n      }\n      this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */);\n\n      if (this.__isNative) {\n        _executeAsAnimatedBatch(this.__getNativeTag().toString(), function () {\n          return NativeAnimatedAPI.setAnimatedNodeValue(_this3.__getNativeTag(), value);\n        });\n      }\n    }\n\n    /**\n     * Sets an offset that is applied on top of whatever value is set, whether via\n     * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n     * things like the start of a pan gesture.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#setoffset\n     */\n  }, {\n    key: \"setOffset\",\n    value: function setOffset(offset) {\n      this._offset = offset;\n      if (this.__isNative) {\n        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n      }\n    }\n\n    /**\n     * Merges the offset value into the base value and resets the offset to zero.\n     * The final output of the value is unchanged.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#flattenoffset\n     */\n  }, {\n    key: \"flattenOffset\",\n    value: function flattenOffset() {\n      this._value += this._offset;\n      this._offset = 0;\n      if (this.__isNative) {\n        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n      }\n    }\n\n    /**\n     * Sets the offset value to the base value, and resets the base value to zero.\n     * The final output of the value is unchanged.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#extractoffset\n     */\n  }, {\n    key: \"extractOffset\",\n    value: function extractOffset() {\n      this._offset += this._value;\n      this._value = 0;\n      if (this.__isNative) {\n        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n      }\n    }\n\n    /**\n     * Stops any running animation or tracking. `callback` is invoked with the\n     * final value after stopping the animation, which is useful for updating\n     * state to match the animation position with layout.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#stopanimation\n     */\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation(callback) {\n      this.stopTracking();\n      this._animation && this._animation.stop();\n      this._animation = null;\n      if (callback) {\n        if (this.__isNative) {\n          NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);\n        } else {\n          callback(this.__getValue());\n        }\n      }\n    }\n\n    /**\n     * Stops any animation and resets the value to its original.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#resetanimation\n     */\n  }, {\n    key: \"resetAnimation\",\n    value: function resetAnimation(callback) {\n      this.stopAnimation(callback);\n      this._value = this._startingValue;\n      if (this.__isNative) {\n        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);\n      }\n    }\n  }, {\n    key: \"__onAnimatedValueUpdateReceived\",\n    value: function __onAnimatedValueUpdateReceived(value) {\n      this._updateValue(value, false /*flush*/);\n    }\n\n    /**\n     * Interpolates the value before updating the property, e.g. mapping 0-1 to\n     * 0-10.\n     */\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n\n    /**\n     * Typically only used internally, but could be used by a custom Animation\n     * class.\n     *\n     * See https://reactnative.dev/docs/animatedvalue#animate\n     */\n  }, {\n    key: \"animate\",\n    value: function animate(animation, callback) {\n      var _this4 = this;\n      var handle = null;\n      if (animation.__isInteraction) {\n        handle = InteractionManager.createInteractionHandle();\n      }\n      var previousAnimation = this._animation;\n      this._animation && this._animation.stop();\n      this._animation = animation;\n      animation.start(this._value, function (value) {\n        // Natively driven animations will never call into that callback\n        _this4._updateValue(value, true /* flush */);\n      }, function (result) {\n        _this4._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      }, previousAnimation, this);\n    }\n\n    /**\n     * Typically only used internally.\n     */\n  }, {\n    key: \"stopTracking\",\n    value: function stopTracking() {\n      this._tracking && this._tracking.__detach();\n      this._tracking = null;\n    }\n\n    /**\n     * Typically only used internally.\n     */\n  }, {\n    key: \"track\",\n    value: function track(tracking) {\n      this.stopTracking();\n      this._tracking = tracking;\n      // Make sure that the tracking animation starts executing\n      this._tracking && this._tracking.update();\n    }\n  }, {\n    key: \"_updateValue\",\n    value: function _updateValue(value, flush) {\n      if (value === undefined) {\n        throw new Error('AnimatedValue: Attempting to set value to undefined');\n      }\n      this._value = value;\n      if (flush) {\n        _flush(this);\n      }\n      _get(_getPrototypeOf(AnimatedValue.prototype), \"__callListeners\", this).call(this, this.__getValue());\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      return {\n        type: 'value',\n        value: this._value,\n        offset: this._offset\n      };\n    }\n  }]);\n  return AnimatedValue;\n}(AnimatedWithChildren);\nexport default AnimatedValue;","map":{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_get","Reflect","get","bind","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","value","apply","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","AnimatedInterpolation","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","_executeAsAnimatedBatch","id","operation","setWaitingForIdentifier","unsetWaitingForIdentifier","AnimatedValue","_AnimatedWithChildren","_super","config","_this","Error","_startingValue","_value","_offset","_animation","useNativeDriver","__makeNative","__detach","_this2","__isNative","getValue","__getNativeTag","stopAnimation","__getValue","setValue","_this3","stop","_updateValue","toString","setAnimatedNodeValue","setOffset","offset","setAnimatedNodeOffset","flattenOffset","flattenAnimatedNodeOffset","extractOffset","extractAnimatedNodeOffset","callback","stopTracking","resetAnimation","__onAnimatedValueUpdateReceived","interpolate","animate","animation","_this4","handle","__isInteraction","createInteractionHandle","previousAnimation","start","clearInteractionHandle","_tracking","track","tracking","flush","__getNativeConfig","type"],"sources":["/home/abhilasha/Desktop/Projects/Instagram-clone/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedValue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport InteractionManager from '../../../../exports/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nvar NativeAnimatedAPI = NativeAnimatedHelper.API;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode) {\n  var animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    /* $FlowFixMe[prop-missing] (>=0.68.0 site=react_native_fb) This comment\n     * suppresses an error found when Flow v0.68 was deployed. To see the error\n     * delete this comment and run Flow. */\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  // $FlowFixMe[prop-missing]\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Some operations are executed only on batch end, which is _mostly_ scheduled when\n * Animated component props change. For some of the changes which require immediate execution\n * (e.g. setValue), we create a separate batch in case none is scheduled.\n */\nfunction _executeAsAnimatedBatch(id, operation) {\n  NativeAnimatedAPI.setWaitingForIdentifier(id);\n  operation();\n  NativeAnimatedAPI.unsetWaitingForIdentifier(id);\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See https://reactnative.dev/docs/animatedvalue\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  constructor(value, config) {\n    super();\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    if (config && config.useNativeDriver) {\n      this.__makeNative();\n    }\n  }\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value - this._offset;\n      });\n    }\n    this.stopAnimation();\n    super.__detach();\n  }\n  __getValue() {\n    return this._value + this._offset;\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#setvalue\n   */\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(value, !this.__isNative /* don't perform a flush for natively driven values */);\n\n    if (this.__isNative) {\n      _executeAsAnimatedBatch(this.__getNativeTag().toString(), () => NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#setoffset\n   */\n  setOffset(offset) {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#flattenoffset\n   */\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#extractoffset\n   */\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#stopanimation\n   */\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    if (callback) {\n      if (this.__isNative) {\n        NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);\n      } else {\n        callback(this.__getValue());\n      }\n    }\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#resetanimation\n   */\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);\n    }\n  }\n  __onAnimatedValueUpdateReceived(value) {\n    this._updateValue(value, false /*flush*/);\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#animate\n   */\n  animate(animation, callback) {\n    var handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    var previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      // Natively driven animations will never call into that callback\n      this._updateValue(value, true /* flush */);\n    }, result => {\n      this._animation = null;\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n    // Make sure that the tracking animation starts executing\n    this._tracking && this._tracking.update();\n  }\n  _updateValue(value, flush) {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    super.__callListeners(this.__getValue());\n  }\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n}\nexport default AnimatedValue;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
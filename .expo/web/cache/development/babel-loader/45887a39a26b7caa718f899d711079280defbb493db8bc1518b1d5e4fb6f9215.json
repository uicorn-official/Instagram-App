{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from '@react-native/normalize-color';\nvar __DEV__ = process.env.NODE_ENV !== 'production';\nvar linear = function linear(t) {\n  return t;\n};\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n  var outputRange = config.outputRange;\n  var inputRange = config.inputRange;\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  }\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */.map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  var message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n   * below this comment, one or both of the operands may be something that\n   * doesn't cleanly convert to a string, like undefined, null, and object,\n   * etc. If you really mean this implicit string conversion, you can do\n   * something like String(myThing) */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nvar AnimatedInterpolation = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedInterpolation);\n  // Export for testing.\n\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n    _classCallCheck(this, AnimatedInterpolation);\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n  _createClass(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._parent.__makeNative(platformConfig);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(NativeAnimatedHelper.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n      return {\n        inputRange: this._config.inputRange,\n        // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;","map":{"version":3,"names":["_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_get","Reflect","get","bind","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","value","apply","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_objectSpread","AnimatedWithChildren","NativeAnimatedHelper","invariant","normalizeColor","__DEV__","process","env","NODE_ENV","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","checkInfiniteRange","checkValidInputRange","easing","extrapolateLeft","extrapolate","extrapolateRight","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","forEach","number","push","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","startsWith","arr","pattern","message","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","transformDataType","__getNativeConfig","validateInterpolation","type","__createInterpolation"],"sources":["/home/abhilasha/Desktop/Projects/Instagram-clone/node_modules/react-native-web/dist/vendor/react-native/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport invariant from 'fbjs/lib/invariant';\nimport normalizeColor from '@react-native/normalize-color';\nvar __DEV__ = process.env.NODE_ENV !== 'production';\nvar linear = t => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n  var outputRange = config.outputRange;\n  var inputRange = config.inputRange;\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  }\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return input => {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex)\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */.map((value, i) => {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return input => {\n    var i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      var val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  var message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n  /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n   * below this comment, one or both of the operands may be something that\n   * doesn't cleanly convert to a string, like undefined, null, and object,\n   * etc. If you really mean this implicit string conversion, you can do\n   * something like String(myThing) */\n  name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nclass AnimatedInterpolation extends AnimatedWithChildren {\n  // Export for testing.\n\n  constructor(parent, config) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n  __makeNative(platformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n  __getValue() {\n    var parentValue = this._parent.__getValue();\n    invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n    return this._interpolation(parentValue);\n  }\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  __attach() {\n    this._parent.__addChild(this);\n  }\n  __detach() {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n  __transformDataType(range) {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n  __getNativeConfig() {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation'\n    };\n  }\n}\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport default AnimatedInterpolation;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}